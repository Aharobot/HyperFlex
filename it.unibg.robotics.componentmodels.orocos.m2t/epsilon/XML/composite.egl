[*
 * HyperFlex toolchain
 * 
 * Copyright (c) 2013
 * All rights reserved.
 * 
 * Luca Gherardi
 * ETH Zurich
 * Institute for Dynamic Systems and Control
 * 
 * ***********************************************************************************************
 * 
 * Author: <A HREF="mailto:lucagh@ethz.ch">Luca Gherardi</A>
 * 
 * In collaboration with: 
 *   <A HREF="mailto:brugali@unibg.it">Davide Brugali</A>, University of Bergamo
 * 
 * ***********************************************************************************************
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * 
 *]
<!-- Start composite "[%=composite.name%]" -->

[%
var orocosHelper =
  new Native("it.unibg.robotics.componentmodels.orocos.m2t.tools.OrocosXmlTools");
  
for(child in composite.components) {
%]
	[%
	if(child.isTypeOf(TaskContext)){
	%]
	<struct name="[%=child.name%]" type="[%=child.namespace%]"::"[%=child.className%]">
	
		<struct name="Activity" type="Activity">
			<simple name="Priority" type="long"><value>[%=child.priority%]</value></simple>
			<simple name="Period" type="double"><value>[%=child.period%]</value></simple>
			<simple name="Scheduler" type="string"><value>ORO_SCHED_OTHER</value></simple>
		</struct>
		<struct name="Ports" type="PropertyBag">
			<!-- Input ports -->
			[%
			for(port in child.inputPorts) {
			var seq : Sequence := orocosHelper.getConnections(port);
			for(conn in seq){	
			%]
			<simple name="[%=port.name%]" type="string"><value>[%=conn.name%]</value></simple>
			[% }} %]
			<!-- Output ports -->
			[%
			for(port in child.outputPorts) {
			var seq : Sequence := orocosHelper.getConnections(port);
			for(conn in seq){	
			%]
			<simple name="[%=port.name%]" type="string"><value>[%=conn.name%]</value></simple>
			[% }} %]
		</struct>
		<simple name="AutoConf" type="boolean"><value>[%=child.autoConf%]</value></simple>
		<simple name="AutoStart" type="boolean"><value>[%=child.autoStart%]</value></simple>
		<simple name="UpdateProperties" type="string">
			<value>properties/[%=child.name%].cpf</value> 
  		</simple>
	
	</struct>
	[%
	}else if(child.isTypeOf(Composite)){
	
		var compositeTemplate := TemplateFactory.load('composite.egl');
		compositeTemplate.populate('composite', child);
	
		out.print(compositeTemplate.process());
	
	}
	%]
[%
}
%]

<!-- End composite "[%=composite.name%]" -->

