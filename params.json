{"name":"Varp","tagline":"Variability Analysis and Resolution Plugin","body":"### Variability Analysis and Resolution Plugin\r\n\r\nThe Variability Analysis and Resolution Plugin allows the user to design Feature Models by means of a graphical editor.\r\n\r\n### Feature Models\r\n\r\n A Feature represents an increment in a systemâ€™s functionalities and can be mandatory or optional. Mandatory features have to be present in all possible configuration of the software system. They are graphically depicted with a black circle on the top. Optional features instead are selected according to the application requirements. They are depicted with a white circle on the top. A feature model is a hierarchical composition of features and is organized as a tree. Parent features are connected to children features by means of edges, which represent containment relationships. The parent feature is a variation point, while the children are the possible variants. The or containment (represented with a white arc) indicates that at least one variant needs to be present in the software system, while the x-or containment (represented with a black arc) indicates that only one variant can be present in the software system. Selecting a subset of all the variants of a feature model corresponds to select a specific configuration of the system. This selection is called an instance of the feature model. Two kinds of constraints between variant features can be specified. The requires constraint indicates that if a feature A is selected then also a feature B has to be selected. The excludes constraint instead indicates that if a feature A is selected then a feature B cannot be selected. A feature model instance is valid if the feature selection satisfies all the constraints.\r\n\r\nFeature models were proposed for the first time in 1990 in the context of the Feature Oriented Domain Analysis (FODA) approach. FODA aims to identify the properties and the functionality of a software, which are commonly present in applications of a specific domain, and separate them in two groups: those that are always present (stable point) and those that are present only in some applications (variation points and their variants). For representing these properties and functionality FODA proposes a formal method: the feature model. \r\n\r\n### How to install the Plugin\r\n\r\nThe plugin can be installed from source (by accessing the [github repository](https://github.com/Robotics-UniBG/FeatureModels) ) or by means of the [update site](robotics-unibg.github.com/FeatureModels/update_site).\r\n\r\nIn order to install the plugin from source you need to setup the following environment:\r\n\r\n* [Eclipse Modeling Tools](http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/junosr1)\r\n* with the Graphical Modeling Tooling [update site](http://download.eclipse.org/modeling/gmp/gmf-tooling/updates/releases/) \r\n\r\n\r\n### Developers\r\n\r\nLuca Gherardi, University of Bergamo\r\nSupervised by Davide Brugali, University of Bergamo\r\n\r\n### More information\r\n\r\nMore information can be found on the following papers:\r\n\r\n* L. Gherardi, D. Brugali. [An eclipse-based Feature Models toolchain](http://www.best-of-robotics.org/pages/publications/UniBergamo_EclipseIT2011.pdf). _In Proc. of the 6th Workshop of the Italian Eclipse Community ([Eclipse-IT 2011](http://2011.eclipse-it.org/home/))_, September 22-23, 2011, Milano, Italy.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}