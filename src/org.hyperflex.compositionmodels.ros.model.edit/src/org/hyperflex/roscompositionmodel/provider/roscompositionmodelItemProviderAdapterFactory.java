/**
 * HyperFlex Toolchain
 * 
 * Copyright (c) 2013
 * All rights reserved.
 * 
 * Luca Gherardi
 * University of Bergamo
 * Department of Engineering
 * 
 * ***********************************************************************************************
 * 
 * Author: <A HREF="mailto:lucagh@ethz.ch">Luca Gherardi</A>
 * 
 * In collaboration with: 
 *   <A HREF="mailto:brugali@unibg.it">Davide Brugali</A>, Department of Engineering
 * 
 * ***********************************************************************************************
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * 
 */
package org.hyperflex.roscompositionmodel.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.hyperflex.compositionmodel.Composite;
import org.hyperflex.compositionmodel.compositionmodelPackage;
import org.hyperflex.compositionmodel.util.compositionmodelSwitch;
import org.hyperflex.roscompositionmodel.roscompositionmodelFactory;
import org.hyperflex.roscompositionmodel.util.roscompositionmodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class roscompositionmodelItemProviderAdapterFactory extends roscompositionmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public roscompositionmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.hyperflex.roscompositionmodel.ROSComposite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROSCompositeItemProvider rosCompositeItemProvider;

	/**
	 * This creates an adapter for a {@link org.hyperflex.roscompositionmodel.ROSComposite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROSCompositeAdapter() {
		if (rosCompositeItemProvider == null) {
			rosCompositeItemProvider = new ROSCompositeItemProvider(this);
		}

		return rosCompositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.hyperflex.roscompositionmodel.ROSMsgProducer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROSMsgProducerItemProvider rosMsgProducerItemProvider;

	/**
	 * This creates an adapter for a {@link org.hyperflex.roscompositionmodel.ROSMsgProducer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROSMsgProducerAdapter() {
		if (rosMsgProducerItemProvider == null) {
			rosMsgProducerItemProvider = new ROSMsgProducerItemProvider(this);
		}

		return rosMsgProducerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.hyperflex.roscompositionmodel.ROSMsgConsumer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROSMsgConsumerItemProvider rosMsgConsumerItemProvider;

	/**
	 * This creates an adapter for a {@link org.hyperflex.roscompositionmodel.ROSMsgConsumer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROSMsgConsumerAdapter() {
		if (rosMsgConsumerItemProvider == null) {
			rosMsgConsumerItemProvider = new ROSMsgConsumerItemProvider(this);
		}

		return rosMsgConsumerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.hyperflex.roscompositionmodel.ROSSrvProducer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROSSrvProducerItemProvider rosSrvProducerItemProvider;

	/**
	 * This creates an adapter for a {@link org.hyperflex.roscompositionmodel.ROSSrvProducer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROSSrvProducerAdapter() {
		if (rosSrvProducerItemProvider == null) {
			rosSrvProducerItemProvider = new ROSSrvProducerItemProvider(this);
		}

		return rosSrvProducerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.hyperflex.roscompositionmodel.ROSSrvConsumer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROSSrvConsumerItemProvider rosSrvConsumerItemProvider;

	/**
	 * This creates an adapter for a {@link org.hyperflex.roscompositionmodel.ROSSrvConsumer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROSSrvConsumerAdapter() {
		if (rosSrvConsumerItemProvider == null) {
			rosSrvConsumerItemProvider = new ROSSrvConsumerItemProvider(this);
		}

		return rosSrvConsumerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.hyperflex.roscompositionmodel.RosTopic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RosTopicItemProvider rosTopicItemProvider;

	/**
	 * This creates an adapter for a {@link org.hyperflex.roscompositionmodel.RosTopic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRosTopicAdapter() {
		if (rosTopicItemProvider == null) {
			rosTopicItemProvider = new RosTopicItemProvider(this);
		}

		return rosTopicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.hyperflex.roscompositionmodel.ROSProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROSPropertyItemProvider rosPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.hyperflex.roscompositionmodel.ROSProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROSPropertyAdapter() {
		if (rosPropertyItemProvider == null) {
			rosPropertyItemProvider = new ROSPropertyItemProvider(this);
		}

		return rosPropertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rosCompositeItemProvider != null) rosCompositeItemProvider.dispose();
		if (rosMsgProducerItemProvider != null) rosMsgProducerItemProvider.dispose();
		if (rosMsgConsumerItemProvider != null) rosMsgConsumerItemProvider.dispose();
		if (rosSrvProducerItemProvider != null) rosSrvProducerItemProvider.dispose();
		if (rosSrvConsumerItemProvider != null) rosSrvConsumerItemProvider.dispose();
		if (rosTopicItemProvider != null) rosTopicItemProvider.dispose();
		if (rosPropertyItemProvider != null) rosPropertyItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link compositionmodelPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class compositionmodelChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends compositionmodelSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseSystem(org.hyperflex.compositionmodel.System object) {
				newChildDescriptors.add
					(createChildParameter
						(compositionmodelPackage.Literals.SYSTEM__COMPOSITES,
						 roscompositionmodelFactory.eINSTANCE.createROSComposite()));

				newChildDescriptors.add
					(createChildParameter
						(compositionmodelPackage.Literals.SYSTEM__CONNECTIONS,
						 roscompositionmodelFactory.eINSTANCE.createRosTopic()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseComposite(Composite object) {
				newChildDescriptors.add
					(createChildParameter
						(compositionmodelPackage.Literals.COMPOSITE__PROV_INTERFACES,
						 roscompositionmodelFactory.eINSTANCE.createROSMsgProducer()));

				newChildDescriptors.add
					(createChildParameter
						(compositionmodelPackage.Literals.COMPOSITE__PROV_INTERFACES,
						 roscompositionmodelFactory.eINSTANCE.createROSSrvProducer()));

				newChildDescriptors.add
					(createChildParameter
						(compositionmodelPackage.Literals.COMPOSITE__REQ_INTERFACES,
						 roscompositionmodelFactory.eINSTANCE.createROSMsgConsumer()));

				newChildDescriptors.add
					(createChildParameter
						(compositionmodelPackage.Literals.COMPOSITE__REQ_INTERFACES,
						 roscompositionmodelFactory.eINSTANCE.createROSSrvConsumer()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseComponentProperty(ComponentProperty object) {
				newChildDescriptors.add
					(createChildParameter
						(compositionmodelPackage.Literals.COMPONENT_PROPERTY__PROPERTIES,
						 roscompositionmodelFactory.eINSTANCE.createROSComposite()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return RosCompositionModelEditPlugin.INSTANCE;
		}
	}

}
